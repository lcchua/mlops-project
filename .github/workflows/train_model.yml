# Train the ML Model for the first time or whenever
# there is code refactoring but no data changes.

name: Train ML Model

on:
  push:
    branches:
      - feature*
    paths:
      - 'main.py'
      - 'config.yml'
      - 'steps/*.py'
      - 'requirements.txt'
      - 'trigger_test.py' # meant to trigger-test this workflow
  workflow_dispatch:
    inputs:
      confirm:
        description: "Do you really want to proceed? (y/n)?"
        required: true
        default: 'n'
        type: choice
        options:
          - 'y'
          - 'n'

permissions: write-all

jobs:
  Pre-Deploy:
    runs-on: ubuntu-latest
    steps:
      - run: echo "This job is automatically triggered by a ${{ github.event_name }} event."
      
  ML-Model-Training:
    name: Train or Retrain ML Model
    runs-on: ubuntu-latest
    environment: nonprod
    needs: [Pre-Deploy]
    if: ${{ github.event_name == 'workflow_dispatch' &&  github.event.inputs.confirm == 'y' }} || ${{ github.event_name == 'push' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0 # Ensure full repo is cloned

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12" # Specify the required Python version

      - name: Create Python ML venv
        run: | 
          python3 -m venv venv
          echo "PATH=$(pwd)/venv/bin:$PATH" >> $GITHUB_ENV

      - name: Install packages and dependencies
        run: | # inclusive of dvc[s3] install
          python3 -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: Configure Git
        run: |
          git config --global user.name ${{ vars.GIT_USERNAME }}
          git config --global user.email ${{ vars.GIT_USEREMAIL }}

    # To intialise dvc tracking if and only if it has not been set up for
    # the first-time already
      - name: First-time initialise DVC only
        run: |
          if ! test -d .dvc; then
            git fetch origin
            dvc init
            git commit -a -m "initialise dvc tracking"
            git push
          fi

    # Last-committed datasets are saved in S3 'dvc_artefacts' folder for download
      - name: Pull from DVC
        run: |
          if [[ -f "data/train.csv.dvc" && -f "data/test.csv.dvc" ]]; then
            git fetch origin
            dvc pull data/train.csv data/test.csv
          fi

    # Latest new datasets are placed in S3 'new_datasets' folder,
    # if new datasets exist then overide the dvc-pulled datasets
      - name: Pull datasets from S3
        run: aws s3 cp ${{ vars.ML_NEW_DATA_S3 }} data/ --quiet --recursive

      - name: Train the prediction model
        run: python3 main.py
              
      - name: Test the trained model
        run: python3 -m pytest

    # Scan the trained ML Model
      - name: Install Protectai Modelscan
        run: pip install modelscan
      - name: Modelscan trained Model
        run: modelscan scan --path models --reporting-format json --show-skipped --log CRITICAL
        continue-on-error: true
    
    # Get the latest Git release tag
      - name: Fetch all tags to get the latest
        id: get_latest_tag
        run: |
          git fetch --tags
          echo "LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)" >> "$GITHUB_OUTPUT"
          echo "LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)"

    # Update the ML model and dataset version control metadata
      - name: Version ML and Git artefacts
        run: |
          git fetch origin
          dvc add data/train.csv && echo "CP1"
          dvc add data/test.csv && echo "CP2"
          git add data/train.csv.dvc data/.gitignore && echo "CP3"
          git add data/test.csv.dvc data/.gitignore && echo "CP4"
          git commit -m "add tracking of new training and testing data ${{ steps.get_latest_tag.outputs.LATEST_TAG }}" && echo "CP5"
          dvc add models/model.pkl && echo "CP6"
          git add models/model.pkl.dvc models/.gitignore && echo "CP7"
          git commit -m "add tracking of new trained model ${{ steps.get_latest_tag.outputs.LATEST_TAG }}" && echo "CP8"
          dvc remote add -d -f remote ${{ vars.ML_ARTEFACTS_S3 }} && echo "CP9"
          git commit .dvc/config -m "update dvc configuration" && echo "CP10"
          dvc push && echo "CP11"
      #    git push && echo "CP12"

#
# Some old script kept here for future reference only.
      - name: Generate Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          commit-message: |
            [create-pr] Automated dvc-git changes in train_model workflow
          title: |
            Update dvc git configuration 
          delete-branch: true
#

# 
#  This call-workflow block is no longer in use but kept for reference only.
#  call-workflow:
#    needs: [Pre-Deploy, ML-Model-Training]
#    if: ${{ needs.ML-Model-Training.result == 'success' }}
#    uses: lcchua/mlops-project/.github/workflows/build_app.yml@main
#    with:
#      skip_confirmation: 'true'
#    secrets: inherit
#
